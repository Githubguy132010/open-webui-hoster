name: Host Open-WebUI

on:
  schedule:
    - cron: '0 * * * *'  # Run every hour
  workflow_dispatch:  # Allow manual triggers

jobs:
  host-open-webui:
    runs-on: ubuntu-latest
    permissions:
      contents: write # This gives permission to create releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Install ngrok
        run: |
          curl -L https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz -o ngrok.tgz
          tar xvzf ngrok.tgz
          chmod +x ngrok

      - name: Set up ngrok auth
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: ./ngrok authtoken $NGROK_AUTH_TOKEN

      - name: Run Open-WebUI
        run: |
          # Pull and run the container
          docker pull ghcr.io/open-webui/open-webui:ollama
          docker run -d -p 3000:8080 -v ollama:/root/.ollama -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:ollama
          
          # Wait for container to be ready
          echo "Waiting for container to be ready..."
          sleep 5

      - name: Start ngrok tunnel and get URL
        run: |
          # Start ngrok in the background with the skip browser warning header
          ./ngrok http 3000 --log=stdout --request-header-add "ngrok-skip-browser-warning: true" > ngrok.log 2>&1 &
          
          # Debug: Check if ngrok is running
          ps aux | grep ngrok
          
          # Debug: Check ngrok logs
          cat ngrok.log
          
          # Try multiple times to get the URL in case of slow startup
          for i in {1..10}; do
            echo "Attempt $i to get ngrok URL..."
            if NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'); then
              if [ ! -z "$NGROK_URL" ] && [ "$NGROK_URL" != "null" ]; then
                echo "Successfully got ngrok URL"
                break
              fi
            fi
            echo "Failed to get URL, waiting 5 seconds..."
            sleep 5
          done
          
          # Debug: Show final URL value
          echo "Final NGROK_URL value: $NGROK_URL"
          
          # Store URL in environment file for GitHub Actions
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
          
          # Set output for the step
          echo "ngrok_url=$NGROK_URL" >> $GITHUB_OUTPUT
          
          # Print URL with clear formatting
          echo "::notice ::Open-WebUI is accessible at: $NGROK_URL"
          echo "============================================="
          echo "üåê Access URL: $NGROK_URL"
          echo "============================================="

      - name: Create Release with New URL
        # Using GitHub API directly instead of git commands
        run: |
          RELEASE_DATA='{
            "tag_name": "latest",
            "name": "Open-WebUI URL",
            "body": "The new URL generated by ngrok for accessing Open-WebUI is: '${{ env.NGROK_URL }}'",
            "target_commitish": "'$GITHUB_SHA'",
            "draft": false,
            "prerelease": false
          }'
          
          # Delete existing release if it exists
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/latest" | \
            jq -r '.id // empty')
          
          if [ ! -z "$RELEASE_ID" ]; then
            echo "Deleting existing release with ID: $RELEASE_ID"
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID"
          fi
          
          # Delete existing tag if it exists
          curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/git/refs/tags/latest" || true
          
          # Create new release
          echo "Creating new release with URL: ${{ env.NGROK_URL }}"
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$RELEASE_DATA" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Keep alive
        run: |
          # Keep the workflow running for ~50 minutes (allowing time for cleanup and saves)
          echo "Initial URL check: ${{ env.NGROK_URL }}"
          for i in {1..10}; do
            echo "Time elapsed: $((i*5)) minutes"
            echo "Current access URL: ${{ env.NGROK_URL }}"
            curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' || echo "Failed to get current URL"
            sleep 300
          done
