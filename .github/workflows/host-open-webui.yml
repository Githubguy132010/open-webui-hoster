name: Host Open-WebUI

on:
  schedule:
    - cron: '0 * * * *'  # Run every hour
  workflow_dispatch:  # Allow manual triggering

jobs:
  host-openwebui:
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Auto-restart before GitHub's 6-hour limit

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load configuration
        id: config
        run: |
          sudo apt-get install -y yq jq
          echo "OPENWEBUI_IMAGE=$(yq '.openwebui.image' config.yml)" >> $GITHUB_ENV
          echo "HOST_PORT=$(yq '.openwebui.host_port' config.yml)" >> $GITHUB_ENV
          echo "CONTAINER_PORT=$(yq '.openwebui.container_port' config.yml)" >> $GITHUB_ENV
          echo "DOWNLOAD_MODELS=$(jq -r '.models | join(" ")' $(yq -r '.ollama.models_file' config.yml))" >> $GITHUB_ENV
          echo "NGROK_REGION=$(yq '.ngrok.region' config.yml)" >> $GITHUB_ENV
          echo "UPDATE_INTERVAL=$(yq '.ngrok.update_interval' config.yml)" >> $GITHUB_ENV
          echo "OPENROUTER_API_KEY=$(yq '.openwebui.api_keys.openrouter' config.yml)" >> $GITHUB_ENV

      - name: Start Open-WebUI container with bundled Ollama
        run: |
          # Start the container with both Open-WebUI and Ollama bundled
          docker run -d --name open-webui \
            -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} \
            -v ollama:/root/.ollama \
            -v open-webui:/app/backend/data \
            -e OPENROUTER_API_KEY=${{ env.OPENROUTER_API_KEY }} \
            -e WEBUI_AUTH_DISABLED=true \
            --restart always \
            ${{ env.OPENWEBUI_IMAGE }}
          
          # Wait for services to initialize
          echo "Waiting for Open-WebUI and Ollama to initialize..."
          sleep 30
          
          # Verify the container is running
          if ! docker ps | grep -q open-webui; then
            echo "ERROR: Container is not running. Container logs:"
            docker logs open-webui
            exit 1
          fi
          
          # Check if Open-WebUI is responding
          for i in {1..12}; do
            if curl -s http://localhost:${{ env.HOST_PORT }} > /dev/null; then
              echo "Open-WebUI is running successfully!"
              break
            fi
            if [ $i -eq 12 ]; then
              echo "ERROR: Open-WebUI is not responding after multiple attempts. Container logs:"
              docker logs open-webui
              exit 1
            fi
            echo "Open-WebUI not responding yet, waiting... (attempt $i/12)"
            sleep 10
          done
          
          # Download the configured models
          if [ ! -z "$DOWNLOAD_MODELS" ]; then
            for model in $DOWNLOAD_MODELS; do
              echo "Downloading model: $model"
              docker exec open-webui ollama pull $model
            done
          fi

      - name: Start ngrok tunnel and get URL
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/ngrok.gpg
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok jq
          ngrok config add-authtoken $NGROK_AUTH_TOKEN
          ngrok http ${{ env.HOST_PORT }} --region=${{ env.NGROK_REGION }} --log=stdout > ngrok.log &
          
          # Wait for ngrok to start
          echo "Starting ngrok tunnel..."
          sleep 10
          
          # Function to display the URL
          display_url() {
            url=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
            echo "============================================="
            echo "üåê Access URL: $url"
            echo "============================================="
          }
          
          # Display URL initially
          display_url
          
          # Keep the workflow running and update URL every configured interval
          while true; do
            sleep ${{ env.UPDATE_INTERVAL }}
            display_url
          done
